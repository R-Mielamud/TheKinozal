"""
Django settings for TheKinozal project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from dotenv import load_dotenv
import helpers.chunked_upload

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "1") == "1"

ALLOWED_HOSTS = ["18.223.151.27", "api.thekinozal.tk", "localhost"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    "rest_framework",
    "api",
    "videos",
    "albums",
    "authorization",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "authorization.middleware.ExtractJWT",
    "authorization.middleware.SetUser",
]

ROOT_URLCONF = 'TheKinozal.urls'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "api.authentication.CsrfExemptAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TheKinozal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'thekinozal',
            'USER': 'thekinozal_user',
            'PASSWORD': os.environ.get("POSTGRES_PASSWD", ""),
            'HOST': '127.0.0.1',
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# JWT
# https://jwt.io/

ROUTES_WHITE_LIST = (
    "/api/auth/login/",
    "/api/auth/register/",
)

JWT_USER_FIELD = "user"

JWT_ALGORITHM = "HS256"

JWT_PREFIX = "Bearer "

# CORS
# https://developer.mozilla.org/ru/docs/Web/HTTP/CORS

CORS_ALLOWED_ORIGINS = [
    "https://thekinozal.tk",
    "http://thekinozal.tk",
    "https://www.thekinozal.tk",
    "http://www.thekinozal.tk",
    "http://localhost:3000",
]

CORS_ALLOWED_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]

# Google API
# https://console.developers.google.com/

GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY", "")

# S3 Upload

DEFAULT_FILE_STORAGE = "TheKinozal.custom_storages.async_s3.AsyncS3Storage"

AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY")

AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_KEY")

AWS_QUERYSTRING_AUTH = False

AWS_S3_FILE_OVERWRITE = True

AWS_OVERWRITE_NAME_LENGTH = 10

AWS_VIDEOS_KEY = "videos"

AWS_STORAGE_BUCKET_NAME = "the-kinozal-media"

AWS_S3_REGION_NAME = "us-east-2"

AWS_DEFAULT_ACL = "public-read"

CHUNK_SIZE = 1024 * 512
